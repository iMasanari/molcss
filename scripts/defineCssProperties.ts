import { writeFile } from 'node:fs/promises'
import { convertToAlphabet } from 'src/utils/convertor'

const commonlyUsedProperties = [
  'padding',
  'width',
  'color',
  'margin',
  'line-height',
  'font-size',
  'height',
  'background-color',
  'display',
  'background',
  'max-width',
  'margin-top',
  'border',
  'margin-left',
  'z-index',
  'border-radius',
  'margin-bottom',
  'font-weight',
  'margin-right',
  'font-family',
  'transition',
  'position',
  'opacity',
  'border-bottom',
  'text-align',
  'overflow',
  'padding-left',
  'left',
  'top',
  'box-shadow',
  'min-height',
  'justify-content',
  'text-transform',
  'min-width',
  'padding-top',
  'letter-spacing',
  'padding-right',
  'outline',
  'background-image',
  'flex',
  'vertical-align',
  'padding-bottom',
  'fill',
  'content',
  'background-size',
  'border-color',
  'font',
  'cursor',
  'right',
  'transform',
  'align-items',
  'text-decoration',
]

const shorthandRecord: Record<string, string[]> = {
  'animation': [
    'animation-name',
    'animation-duration',
    'animation-timing-function',
    'animation-delay',
    'animation-iteration-count',
    'animation-direction',
    'animation-fill-mode',
    'animation-play-state',
  ],
  'background': [
    'background-image',
    'background-position',
    'background-size',
    'background-repeat',
    'background-origin',
    'background-clip',
    'background-attachment',
    'background-color',
  ],
  'border': [
    // border-width
    'border-top-width',
    'border-right-width',
    'border-bottom-width',
    'border-left-width',
    // border-style
    'border-top-style',
    'border-right-style',
    'border-bottom-style',
    'border-left-style',
    // border-color
    'border-top-color',
    'border-right-color',
    'border-bottom-color',
    'border-left-color',
  ],
  'border-bottom': [
    'border-bottom-width',
    'border-bottom-style',
    'border-bottom-color',
  ],
  'border-color': [
    'border-top-color',
    'border-right-color',
    'border-bottom-color',
    'border-left-color',
  ],
  'border-left': [
    'border-left-width',
    'border-left-style',
    'border-left-color',
  ],
  'border-radius': [
    'border-top-left-radius',
    'border-top-right-radius',
    'border-bottom-right-radius',
    'border-bottom-left-radius',
  ],
  'border-right': [
    'border-right-width',
    'border-right-style',
    'border-right-color',
  ],
  'border-style': [
    'border-top-style',
    'border-right-style',
    'border-bottom-style',
    'border-left-style',
  ],
  'border-width': [
    'border-top-width',
    'border-right-width',
    'border-bottom-width',
    'border-left-width',
  ],
  'column-rule': [
    'column-rule-width',
    'column-rule-style',
    'column-rule-color',
  ],
  'columns': [
    'column-width',
    'column-count',
  ],
  'flex': [
    'flex-grow',
    'flex-shrink',
    'flex-basis',
  ],
  'flex-flow': [
    'flex-direction',
    'flex-wrap',
  ],
  'font': [
    'font-style',
    'font-variant',
    'font-weight',
    'font-stretch',
    'font-size',
    'line-height',
    'font-family',
  ],
  'grid': [
    'grid-template-rows',
    'grid-template-columns',
    'grid-template-areas',
    'grid-auto-rows',
    'grid-auto-columns',
    'grid-auto-flow',
    'grid-column-gap',
    'grid-row-gap',
    'column-gap',
    'row-gap',
  ],
  'grid-area': [
    'grid-row-start',
    'grid-column-start',
    'grid-row-end',
    'grid-column-end',
  ],
  'grid-column': [
    'grid-column-start',
    'grid-column-end',
  ],
  'grid-row': [
    'grid-row-start',
    'grid-row-end',
  ],
  'grid-template': [
    'grid-template-columns',
    'grid-template-rows',
    'grid-template-areas',
  ],
  'list-style': [
    'list-style-type',
    'list-style-position',
    'list-style-image',
  ],
  'margin': [
    'margin-bottom',
    'margin-left',
    'margin-right',
    'margin-top',
  ],
  'offset': [
    'offset-position',
    'offset-path',
    'offset-distance',
    'offset-anchor',
    'offset-rotate',
  ],
  'outline': [
    'outline-color',
    'outline-style',
    'outline-width',
  ],
  'padding': [
    'padding-bottom',
    'padding-left',
    'padding-right',
    'padding-top',
  ],
  'text-decoration': [
    'text-decoration-color',
    'text-decoration-style',
    'text-decoration-line',
  ],
  'transition': [
    'transition-delay',
    'transition-duration',
    'transition-property',
    'transition-timing-function',
  ],
}

const props = new Set([
  ...commonlyUsedProperties,
  ...Object.keys(shorthandRecord),
  ...Object.values(shorthandRecord).flat(),
])

const toSnakeUpperCase = (str: string) => str.replace(/-/g, '_').toUpperCase()

const propMap = new Map([...props].map((v, i) => [v, convertToAlphabet(i)]))

let result = `// generated by scripts/defineCssProperties.ts

const enum DefineProperties {
${[...propMap.entries()].map(([prop, id]) =>
  `  ${toSnakeUpperCase(prop)} = '${id}',`
).join('\n')}
}

export const defineProperties = new Map([
${[...propMap.keys()].map((prop) =>
  `  ['${prop}', DefineProperties.${toSnakeUpperCase(prop)}],`
).join('\n')}
])

export const shorthands: Record<string, string[]> = {
${Object.entries(shorthandRecord).map(([shorthand, longhands]) =>
  `  [DefineProperties.${toSnakeUpperCase(shorthand)}]: [
${longhands.map(v =>
    `    DefineProperties.${toSnakeUpperCase(v)},`
  ).join('\n')}
  ],`
).join('\n')}
}
`

writeFile('src/generated/defineCssProperties.ts', result)
